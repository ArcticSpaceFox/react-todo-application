{"version":3,"sources":["components/navabar.js","components/todo.js","components/todolist.js","TodoStore.js","App.js","serviceWorker.js","index.js"],"names":["observer","props","useState","menu","setMenu","value","setValue","addTodo","store","className","onClick","aria-label","aria-expanded","data-target","aria-hidden","onSubmit","e","preventDefault","type","onChange","target","todo","done","toggleDone","bind","this","deleteTodo","todos","filteredTodos","length","placeholder","filter","map","key","id","Todo","v4","observable","TodoStore","matchCase","RegExp","test","action","push","indexOf","t","computed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.080f6d3a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nfunction Navbar(props) {\n  const [menu, setMenu] = useState(false)\n  const [value, setValue] = useState(\"\")\n  \n  const {addTodo} = props.store\n\n  const prepareAddTodo = (e) => {\n    e.preventDefault()\n    addTodo(value)\n    setValue(\"\")\n  }\n\n  return (\n    <div className=\"navbar has-shadow\">\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item\">\n          <p className=\"title\">Easy Todo</p>\n        </div>\n\n        <button onClick={() => setMenu(!menu)} className={`navbar-burger burger button ${menu ? \"is-active\" : \"\"}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </button>\n      </div>\n\n      <div className={`navbar-menu ${menu ? \"is-active\" : \"\"}`}>\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <form onSubmit={prepareAddTodo} className=\"field has-addons\">\n              <p className=\"control is-expanded\">\n                <input value={value} type=\"text\" onChange={(e) => setValue(e.target.value)} className=\"input\" />\n              </p>\n              <p className=\"control\">\n                <button className=\"button is-info has-text-weight-bold\">\n                  Add Todo\n                </button>\n              </p>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default observer(Navbar)\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nfunction Todo(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"level\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <p className={`title ${props.todo.done ? \"has-text-grey-light\" : \"\"}`}>{props.todo.value}</p>\n            </div>\n          </div>\n          <div className=\"level-right\">\n            <div className=\"level-item buttons\">\n              <button onClick={props.toggleDone.bind(this, props.todo)} className={`button has-text-weight-bold ${props.todo.done ? \"is-warning\" : \"is-primary\"}`}>{props.todo.done ? \"Undo\" : \"Done\"}</button>\n              <button onClick={props.deleteTodo.bind(this, props.todo)} className=\"button is-danger has-text-weight-bold\">Delete</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default observer(Todo)\n","import React from 'react'\n\nimport Todo from \"./todo\";\nimport { observer } from 'mobx-react';\n\nfunction TodoList(props) {\n  const { todos, toggleDone, deleteTodo, filteredTodos } = props.store\n\n  return (\n    <div>\n      <div className=\"hero is-info\">\n        <div className=\"hero-body has-text-centered\">\n          <p className=\"title is-1\">{todos.length} Todos</p>\n        </div>\n      </div>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          <input className=\"input\" placeholder=\"Search...\" type=\"text\" value={props.store.filter} onChange={(e) => props.store.filter = e.target.value} />\n        </div>\n      </section>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          {filteredTodos.map(todo => (\n            <Todo key={todo.id} todo={todo} toggleDone={toggleDone} deleteTodo={deleteTodo} />\n          ))}\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default observer(TodoList)\n","import { observable, action, computed } from \"mobx\";\nimport { v4 } from \"uuid\";\n\nexport class Todo {\n  @observable value\n  @observable done\n\n  constructor (value) {\n    this.id = v4()\n    this.value = value\n    this.done = false\n  }\n}\n\nexport class TodoStore {\n  @observable todos = []\n  @observable filter = \"\"\n\n  @action addTodo = (value) => {\n    this.todos.push(new Todo(value))\n  }\n  @action toggleDone = (todo) => {\n    this.todos[this.todos.indexOf(todo)].done = !this.todos[this.todos.indexOf(todo)].done\n  }\n  @action deleteTodo = (todo) => {\n    this.todos = this.todos.filter(t => t !== todo)\n  }\n\n  @computed get filteredTodos () {\n    const matchCase = new RegExp(this.filter, \"i\")\n    return this.todos.filter(todo=> !this.filter || matchCase.test(todo.value))\n  }\n}\n","import React from 'react';\n\nimport Navbar from \"./components/navabar\";\nimport TodoList from \"./components/todolist\";\nimport { TodoStore } from './TodoStore';\n\nfunction App() {\n  const store = new TodoStore()\n  return (\n    <div>\n      <Navbar store={store}/>\n      <TodoList store={store}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}