{"version":3,"sources":["TodoContext.js","components/navabar.js","components/todo.js","components/todolist.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","Date","now","todos","setTodos","Provider","value","children","Navbar","menu","setMenu","className","onClick","aria-label","aria-expanded","data-target","aria-hidden","type","Todo","todo","done","TodoList","v4","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4KAEaA,EAAcC,0BAEdC,EAAe,SAACC,GAAW,IAAD,EACXC,mBAAS,CACjC,CACE,GAAMC,KAAKC,MACX,MAAS,WACT,MAAQ,GAEV,CACE,GAAMD,KAAKC,MACX,MAAS,iBACT,MAAQ,KAVyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAcrC,OACE,kBAACR,EAAYS,SAAb,CAAsBC,MAAO,CAACH,EAAOC,IAClCL,EAAMQ,WClBE,SAASC,IAAU,IAAD,EACPR,oBAAS,GADF,mBACxBS,EADwB,KAClBC,EADkB,KAG/B,OACE,yBAAKC,UAAU,qBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eACb,uBAAGA,UAAU,SAAb,cAGF,4BAAQC,QAAS,kBAAMF,GAASD,IAAOE,UAAS,sCAAiCF,EAAO,YAAc,IAAMI,aAAW,OAAOC,gBAAc,QAAQC,cAAY,sBAC9J,0BAAMC,cAAY,SAClB,0BAAMA,cAAY,SAClB,0BAAMA,cAAY,WAItB,yBAAKL,UAAS,sBAAiBF,EAAO,YAAc,KAClD,yBAAKE,UAAU,cACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,oBACb,uBAAGA,UAAU,uBACX,2BAAOM,KAAK,OAAON,UAAU,WAE/B,uBAAGA,UAAU,WACX,4BAAQA,UAAU,uCAAlB,kB,WCzBD,SAASO,EAAKnB,GAC3B,OACE,yBAAKY,UAAU,QACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,cACb,uBAAGA,UAAS,gBAAWZ,EAAMoB,KAAKC,KAAO,mBAAqB,KAAOrB,EAAMoB,KAAKb,SAGpF,yBAAKK,UAAU,eACb,yBAAKA,UAAU,sBACb,4BAAQA,UAAS,sCAAiCZ,EAAMoB,KAAKC,KAAO,aAAe,eAAiBrB,EAAMoB,KAAKC,KAAO,OAAS,QAC/H,4BAAQT,UAAU,yCAAlB,eCTC,SAASU,IACtB,IAAMlB,EAAQ,CACZ,CACE,GAAMmB,eACN,MAAS,WACT,MAAQ,GAEV,CACE,GAAMA,eACN,MAAS,iBACT,MAAQ,IAIZ,OACE,6BACE,yBAAKX,UAAU,gBACb,yBAAKA,UAAU,+BACb,uBAAGA,UAAU,cAAb,WAIJ,6BAASA,UAAU,WACjB,yBAAKA,UAAU,aACZR,EAAMoB,KAAI,SAAAJ,GAAI,OACb,kBAACD,EAAD,CAAMM,IAAKL,EAAKM,GAAIN,KAAMA,UCfvBO,MATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAClB,EAAD,MACA,kBAACa,EAAD,QCCcM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d537c7f2.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react'\n\nexport const TodoContext = createContext();\n\nexport const TodoProvider = (props) => {\n  const [todos, setTodos] = useState([\n    {\n      \"id\": Date.now(),\n      \"value\": \"Buy milk\",\n      \"done\": false\n    },\n    {\n      \"id\": Date.now(),\n      \"value\": \"Play with doge\",\n      \"done\": false  \n    }\n  ]);\n\n  return (\n    <TodoContext.Provider value={[todos, setTodos]}>\n      {props.children}\n    </TodoContext.Provider>\n  )\n}\n","import React, { useState } from 'react'\n\nexport default function Navbar() {\n  const [menu, setMenu] = useState(false)\n\n  return (\n    <div className=\"navbar has-shadow\">\n      <div className=\"navbar-brand\">\n        <div className=\"navbar-item\">\n          <p className=\"title\">Easy Todo</p>\n        </div>\n\n        <button onClick={() => setMenu(!menu)} className={`navbar-burger burger button ${menu ? \"is-active\" : \"\"}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n          <span aria-hidden=\"true\"></span>\n        </button>\n      </div>\n\n      <div className={`navbar-menu ${menu ? \"is-active\" : \"\"}`}>\n        <div className=\"navbar-end\">\n          <div className=\"navbar-item\">\n            <div className=\"field has-addons\">\n              <p className=\"control is-expanded\">\n                <input type=\"text\" className=\"input\" />\n              </p>\n              <p className=\"control\">\n                <button className=\"button is-info has-text-weight-bold\">\n                  Add Todo\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function Todo(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"card-content\">\n        <div className=\"level\">\n          <div className=\"level-left\">\n            <div className=\"level-item\">\n              <p className={`title ${props.todo.done ? \"has-text-primary\" : \"\"}`}>{props.todo.value}</p>\n            </div>\n          </div>\n          <div className=\"level-right\">\n            <div className=\"level-item buttons\">\n              <button className={`button has-text-weight-bold ${props.todo.done ? \"is-warning\" : \"is-primary\"}`}>{props.todo.done ? \"Undo\" : \"Done\"}</button>\n              <button className=\"button is-danger has-text-weight-bold\">Delete</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { v4 } from \"uuid\";\n\nimport Todo from \"./todo\";\n\nexport default function TodoList() {\n  const todos = [\n    {\n      \"id\": v4(),\n      \"value\": \"Buy milk\",\n      \"done\": false\n    },\n    {\n      \"id\": v4(),\n      \"value\": \"Play with doge\",\n      \"done\": false  \n    }\n  ]\n\n  return (\n    <div>\n      <div className=\"hero is-info\">\n        <div className=\"hero-body has-text-centered\">\n          <p className=\"title is-1\">Todos</p>\n        </div>\n      </div>\n\n      <section className=\"section\">\n        <div className=\"container\">\n          {todos.map(todo => (\n            <Todo key={todo.id} todo={todo}/>\n          ))}\n        </div>\n      </section>\n    </div>\n  )\n}\n","import React from 'react';\n\nimport { TodoProvider } from \"./TodoContext\";\n\nimport Navbar from \"./components/navabar\";\nimport TodoList from \"./components/todolist\";\n\nfunction App() {\n  return (\n    <TodoProvider>\n      <Navbar/>\n      <TodoList/>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}